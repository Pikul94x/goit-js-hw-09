{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAOC,SAASC,cAAc,SAE9BC,EAAaF,SAASC,cAAc,kBACpCE,EAAYH,SAASC,cAAc,iBACnCG,EAAgBJ,SAASC,cAAc,mBAqB7C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,YAEpBA,MA5BPR,EAAKe,iBAAiB,UAEtB,SAAwBC,GACtBA,EAAEC,iBAIF,IAFA,IAAIC,EAAQC,OAAOhB,EAAWiB,OAErBC,EAAI,EAAGA,GAAKF,OAAOd,EAAce,OAAQC,IAChDf,EAAce,EAAGH,GACdI,MAAK,SAAAC,G,IAAGC,EAACD,EAADC,EAAGhB,EAAKe,EAALf,MACViB,EAAA3B,GAAS4B,OAAOC,QAAQ,uBAAiCC,OAARJ,EAAE,QAAYI,OAANpB,EAAM,UAEhEqB,OAAM,SAAAN,G,IAAGC,EAACD,EAADC,EAAGhB,EAAKe,EAALf,MACXiB,EAAA3B,GAAS4B,OAAOI,QAAQ,sBAA8BF,OAARJ,EAAE,QAAYI,OAANpB,EAAM,UAEhEU,GAASC,OAAOf,EAAUgB,U","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.5.min.css';\n\nconst form = document.querySelector('.form');\n\nconst firstDelay = document.querySelector('[name=\"delay\"]');\nconst delayStep = document.querySelector('[name=\"step\"]');\nconst promiseAmount = document.querySelector('[name=\"amount\"]');\n\nform.addEventListener('submit', createPromises);\n\nfunction createPromises(e) {\n  e.preventDefault();\n\n  let delay = Number(firstDelay.value);\n\n  for (let i = 0; i <= Number(promiseAmount.value); i++) {\n    createPromise(i, delay)\n      .then(({ i, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${i} in ${delay}ms`);\n      })\n      .catch(({ i, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${i} in ${delay}ms`);\n      });\n    delay += Number(delayStep.value);\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// import Notiflix from \"notiflix\";\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     if (shouldResolve) {\n//       // Fulfill\n//       resolve(`Fulfilled promise ${position} in ${delay}ms`);\n//     } else {\n//       // Reject\n//       reject(`Rejected promise ${position} in ${delay}ms`);\n//     }\n//   });\n// }\n// const form = document.querySelector('.form');\n// const delayInput = document.querySelector('input[name=\"delay\"]');\n// const stepInput = document.querySelector('input[name=\"step\"]');\n// const amountInput = document.querySelector('input[name=\"amount\"]');\n// form.addEventListener('submit', event => {\n//   event.preventDefault();\n//   setTimeout(() => {\n//     let timeId = null;\n//     let delay = parseInt(delayInput.value);\n//     let position = 1;\n//     createPromise(position, delay)\n//       .then(trueValue => {\n//         Notiflix.Notify.success(trueValue);\n//       })\n//       .catch(falseValue => {\n//         Notiflix.Notify.failure(falseValue);\n//       });\n//     timeId = setInterval(() => {\n//       position += 1;\n//       delay += parseInt(stepInput.value);\n//       createPromise(position, delay)\n//         .then(trueValue => {\n//           Notiflix.Notify.success(trueValue);\n//         })\n//         .catch(falseValue => {\n//           Notiflix.Notify.failure(falseValue);\n//         });\n//       if (position == parseInt(amountInput.value)) clearInterval(timeId);\n//     }, parseInt(stepInput.value));\n//   }, parseInt(delayInput.value));\n// });\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$firstDelay","$ce04d3a99e08e73b$var$delayStep","$ce04d3a99e08e73b$var$promiseAmount","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","delay1","Number","value","i1","then","param","i","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.edd111d7.js.map"}